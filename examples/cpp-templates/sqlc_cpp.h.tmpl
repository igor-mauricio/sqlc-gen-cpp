{{- /*
https://pkg.go.dev/text/template
https://github.com/sqlc-dev/sqlc/blob/main/protos/plugin/codegen.proto
https://github.com/AugustNagro/magnum?tab=readme-ov-file
*/ -}}

{{- /*                          TYPE CONVERSION                      */ -}}

{{- define "CppType" -}}
    {{- $cppType := .Type.Name -}}
    {{- if eq (upper .Type.Name) "INTEGER"}}{{ $cppType = "int" }}
    {{- else if eq (upper .Type.Name) "TEXT"}}{{ $cppType = "std::string" }}
    {{- else if eq (upper .Type.Name) "BLOB"}}{{ $cppType = "std::vector<uint8_t>" }}
    {{- else if eq (upper .Type.Name) "REAL"}}{{ $cppType = "double" }}
    {{- else if (regexMatch "^CHAR\\([0-9]+\\)$" (upper .Type.Name)) }}{{ $cppType = "std::string" }}
    {{- else if eq (upper .Type.Name) "DATE"}}{{ $cppType = "std::string" }}
    {{- else if eq (upper .Type.Name) "TIMESTAMP"}}{{ $cppType = "std::string" }}
    {{- end -}}
    {{- $cppType }}
{{- end -}}


{{"/* THIS FILE IS GENERATED BY SQLC. DO NOT EDIT. */\n\n"}}

{{- /*                          IMPORTS                      */ -}}
#pragma once
#include <string>
#include <vector>
#include <optional>
#include <cstdint>

#define FORMAT_SPIFFS_IF_FAILED true

namespace repo {
/* type definitions */
{{- range .Queries }}

{{- $rowType := printf "%sParams" .Name -}}
{{- if or (eq .Cmd ":many") (eq .Cmd ":one") }}
  {{- if gt (len .Columns) 1 }}
{{ "typedef struct {" }}
{{- range .Columns }}
    {{ if not .NotNull }}std::optional<{{end}}{{- template "CppType" . }}{{ if not .NotNull }}>{{end}} {{.Name}};
{{- end}}
} {{ $rowType }};
  {{- else }}
{{"typedef "}}{{- if not (index .Columns 0).NotNull }}Option[{{end}}{{- template "CppType" (index .Columns 0) }}{{- if not (index .Columns 0).NotNull }}]{{end}}{{" "}}{{ $rowType }};
  {{- end}}
{{end}}




{{- /*                              INTERFACE CLASS                    */ -}} 



{{- end }}
class Repository {
public:
{{- /*                          INIT DATABASE                      */ -}}
    {{"\n"}}
    int err = 0;
    virtual ~Repository() = default;
    virtual void open(std::string filename) = 0;
    {{""}}

{{- /*                          QUERIES                      */ -}}
{{- range .Queries }}

{{- $rowType := printf "%sParams" .Name -}}


{{- /*                          RETURN TYPE                      */ -}}
{{- $returnType := "__DEFAULT__" -}}
{{- if eq .Cmd ":exec" }}
    {{- $returnType = "void" -}}
{{- else if eq .Cmd ":many" }}
    {{- $returnType = printf "std::vector<%s>" $rowType -}}
{{- else if eq .Cmd ":one" }}
    {{- $returnType = $rowType -}}
{{- else -}}
    {{- $returnType = "__UNKNOWN_QUERY_ANNOTATION__" -}}
{{- end -}}

{{- /*                          FUNCTION PARAMETERS 0                      */ -}}

{{- if eq (len .Params) 0 -}}
    {{"\t"}}virtual {{ $returnType }} {{.Name}}() = 0;

{{- /*                          FUNCTION PARAMETERS 1                      */ -}}
{{- else if eq (len .Params) 1 -}}
    virtual {{ $returnType }} {{.Name}}({{- range $i, $p := .Params -}}{{template "CppType" .Column}} {{.Column.Name}} {{- end -}}) = 0;

{{- /*                          FUNCTION PARAMETERS 2+                      */ -}}
{{- else -}}
    {{$first := true -}}
    {{"\t"}}virtual {{ $returnType }} {{.Name}}(
    {{- range $i, $p := .Params -}}
    {{if $first}}{{$first = false}}{{else}},{{end}}
        {{ if not $p.Column.NotNull }}std::optional<{{end}}
{{- template "CppType" .Column}}
{{- if not $p.Column.NotNull }}>{{end}} {{.Column.Name}}
{{- end -}}
{{"\n\t"}}) = 0;
{{- end -}}
{{"\n"}}

{{- /*                          END OF FUNCTION PARAMETERS                      */ -}}

{{- /*                          END RESULT                      */ -}}
{{- /*                          END OF FUNCTION                      */ -}}
{{- end -}}
{{"\n};"}}

{{- /*                          END OF INTERFACE CLASS                    */ -}}








{{- /*                              IMPLEMENTATION CLASS                    */ -}} 


{{- "\n" }}
class SqliteRepository: public Repository {
private:
    void* database = nullptr;
public:

{{- /*                          INIT DATABASE                      */ -}}
    {{"\n"}}
    void open(std::string filename);
    {{""}}

{{- /*                          QUERIES                      */ -}}
{{- range .Queries }}

{{- $rowType := printf "%sParams" .Name -}}


{{- /*                          RETURN TYPE                      */ -}}
{{- $returnType := "__DEFAULT__" -}}
{{- if eq .Cmd ":exec" }}
    {{- $returnType = "void" -}}
{{- else if eq .Cmd ":many" }}
    {{- $returnType = printf "std::vector<%s>" $rowType -}}
{{- else if eq .Cmd ":one" }}
    {{- $returnType = $rowType -}}
{{- else -}}
    {{- $returnType = "__UNKNOWN_QUERY_ANNOTATION__" -}}
{{- end -}}

{{- /*                          FUNCTION PARAMETERS 0                      */ -}}

{{- if eq (len .Params) 0 -}}
    {{"\t"}}{{ $returnType }} {{.Name}}();

{{- /*                          FUNCTION PARAMETERS 1                      */ -}}
{{- else if eq (len .Params) 1 -}}
    {{ $returnType }} {{.Name}}({{- range $i, $p := .Params -}}{{template "CppType" .Column}} {{.Column.Name}} {{- end -}});

{{- /*                          FUNCTION PARAMETERS 2+                      */ -}}
{{- else -}}
    {{$first := true }}
    {{- "\t"}}{{ $returnType }} {{.Name}}(
    {{- range $i, $p := .Params -}}
    {{if $first}}{{$first = false}}{{else}},{{end}}
        {{ if not $p.Column.NotNull }}std::optional<{{end}}
{{- template "CppType" .Column}}
{{- if not $p.Column.NotNull }}>{{end}} {{.Column.Name}}
{{- end -}}
{{"\n\t"}});
{{- end -}}
{{"\n"}}

{{- /*                          END OF FUNCTION PARAMETERS                      */ -}}

{{- /*                          END RESULT                      */ -}}
{{- /*                          END OF FUNCTION                      */ -}}
{{- end -}}
{{"\n};"}}

}